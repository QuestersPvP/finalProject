// "Rock3.h" generated by "Obj2Header.exe" [Version 1.9d] Author: L.Norri Fullsail University.
// Data is converted to left-handed coordinate system and UV data is V flipped for Direct3D/Vulkan.
// The companion file "Rock3.h2b" is a binary dump of this format(-padding) for more flexibility.
// Loading *.h2b: read version, sizes, handle strings(max len 260) by reading until null-terminated.
/***********************/
/*  Generator version  */
/***********************/
#ifndef _Rock3_version_
const char Rock3_version[4] = { '0','1','9','d' };
#define _Rock3_version_
#endif
/************************************************/
/*  This section contains the model's size data */
/************************************************/
#ifndef _Rock3_vertexcount_
const unsigned Rock3_vertexcount = 84;
#define _Rock3_vertexcount_
#endif
#ifndef _Rock3_indexcount_
const unsigned Rock3_indexcount = 84;
#define _Rock3_indexcount_
#endif
#ifndef _Rock3_materialcount_
const unsigned Rock3_materialcount = 1; // can be used for batched draws
#define _Rock3_materialcount_
#endif
#ifndef _Rock3_meshcount_
const unsigned Rock3_meshcount = 1;
#define _Rock3_meshcount_
#endif
/************************************************/
/*  This section contains the raw data to load  */
/************************************************/
#ifndef __OBJ_VEC3__
typedef struct _OBJ_VEC3_
{
	float x,y,z; // 3D Coordinate.
}OBJ_VEC3;
#define __OBJ_VEC3__
#endif
#ifndef __OBJ_VERT__
typedef struct _OBJ_VERT_
{
	OBJ_VEC3 pos; // Left-handed +Z forward coordinate w not provided, assumed to be 1.
	OBJ_VEC3 uvw; // D3D/Vulkan style top left 0,0 coordinate.
	OBJ_VEC3 nrm; // Provided direct from obj file, may or may not be normalized.
}OBJ_VERT;
#define __OBJ_VERT__
#endif
#ifndef _Rock3_vertices_
// Raw Vertex Data follows: Positions, Texture Coordinates and Normals.
const OBJ_VERT Rock3_vertices[84] =
{
	{	{ -0.823111f, 0.491957f, 0.351610f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.933500f, -0.274600f, -0.230600f }	},
	{	{ -0.499213f, 0.619422f, -1.111568f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.933500f, -0.274600f, -0.230600f }	},
	{	{ -0.223367f, -0.030865f, -1.453793f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.933500f, -0.274600f, -0.230600f }	},
	{	{ 0.168062f, -0.194425f, -1.198741f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.369400f, -0.413600f, -0.832200f }	},
	{	{ -0.223367f, -0.030865f, -1.453793f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.369400f, -0.413600f, -0.832200f }	},
	{	{ 0.209959f, 0.438943f, -1.494926f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.369400f, -0.413600f, -0.832200f }	},
	{	{ -0.499213f, 0.619422f, -1.111568f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.243700f, 0.622300f, -0.743900f }	},
	{	{ -0.101468f, 1.892767f, -0.176634f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.243700f, 0.622300f, -0.743900f }	},
	{	{ 0.209959f, 0.438943f, -1.494926f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.243700f, 0.622300f, -0.743900f }	},
	{	{ -0.101750f, 1.186176f, 0.972865f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.253500f, 0.824100f, 0.506500f }	},
	{	{ -0.101468f, 1.892767f, -0.176634f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.253500f, 0.824100f, 0.506500f }	},
	{	{ -0.641415f, 1.558296f, 0.097372f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.253500f, 0.824100f, 0.506500f }	},
	{	{ 0.690754f, 1.554017f, 0.048798f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.210400f, 0.832800f, 0.512000f }	},
	{	{ -0.101468f, 1.892767f, -0.176634f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.210400f, 0.832800f, 0.512000f }	},
	{	{ -0.101750f, 1.186176f, 0.972865f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.210400f, 0.832800f, 0.512000f }	},
	{	{ -0.641415f, 1.558296f, 0.097372f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.624600f, 0.579500f, -0.523500f }	},
	{	{ -0.101468f, 1.892767f, -0.176634f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.624600f, 0.579500f, -0.523500f }	},
	{	{ -0.499213f, 0.619422f, -1.111568f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.624600f, 0.579500f, -0.523500f }	},
	{	{ -0.101468f, 1.892767f, -0.176634f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.120800f, 0.652500f, -0.748100f }	},
	{	{ 0.451408f, 1.383320f, -0.710237f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.120800f, 0.652500f, -0.748100f }	},
	{	{ 0.209959f, 0.438943f, -1.494926f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.120800f, 0.652500f, -0.748100f }	},
	{	{ 0.451408f, 1.383320f, -0.710237f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.448800f, 0.831100f, -0.328400f }	},
	{	{ -0.101468f, 1.892767f, -0.176634f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.448800f, 0.831100f, -0.328400f }	},
	{	{ 0.690754f, 1.554017f, 0.048798f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.448800f, 0.831100f, -0.328400f }	},
	{	{ 0.555411f, 0.750750f, 0.966913f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.433500f, 0.645600f, 0.628700f }	},
	{	{ 0.690754f, 1.554017f, 0.048798f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.433500f, 0.645600f, 0.628700f }	},
	{	{ -0.101750f, 1.186176f, 0.972865f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.433500f, 0.645600f, 0.628700f }	},
	{	{ -0.101750f, 1.186176f, 0.972865f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.649700f, 0.467800f, 0.599300f }	},
	{	{ -0.641415f, 1.558296f, 0.097372f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.649700f, 0.467800f, 0.599300f }	},
	{	{ -0.562602f, 0.611479f, 0.921830f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.649700f, 0.467800f, 0.599300f }	},
	{	{ -0.823111f, 0.491957f, 0.351610f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.971800f, 0.116700f, -0.205000f }	},
	{	{ -0.641415f, 1.558296f, 0.097372f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.971800f, 0.116700f, -0.205000f }	},
	{	{ -0.499213f, 0.619422f, -1.111568f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.971800f, 0.116700f, -0.205000f }	},
	{	{ -0.223367f, -0.030865f, -1.453793f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.397000f, 0.289900f, -0.870800f }	},
	{	{ -0.499213f, 0.619422f, -1.111568f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.397000f, 0.289900f, -0.870800f }	},
	{	{ 0.209959f, 0.438943f, -1.494926f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.397000f, 0.289900f, -0.870800f }	},
	{	{ 0.922970f, 0.580554f, 0.164801f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.925500f, 0.181100f, -0.332600f }	},
	{	{ 0.451408f, 1.383320f, -0.710237f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.925500f, 0.181100f, -0.332600f }	},
	{	{ 0.690754f, 1.554017f, 0.048798f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.925500f, 0.181100f, -0.332600f }	},
	{	{ 0.555411f, 0.750750f, 0.966913f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.185600f, 0.267100f, 0.945600f }	},
	{	{ -0.101750f, 1.186176f, 0.972865f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.185600f, 0.267100f, 0.945600f }	},
	{	{ 0.064105f, 0.397846f, 1.163016f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.185600f, 0.267100f, 0.945600f }	},
	{	{ 0.064105f, 0.397846f, 1.163016f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.305900f, 0.162000f, 0.938200f }	},
	{	{ -0.101750f, 1.186176f, 0.972865f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.305900f, 0.162000f, 0.938200f }	},
	{	{ -0.562602f, 0.611479f, 0.921830f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.305900f, 0.162000f, 0.938200f }	},
	{	{ -0.562602f, 0.611479f, 0.921830f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.901100f, 0.239700f, 0.361400f }	},
	{	{ -0.641415f, 1.558296f, 0.097372f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.901100f, 0.239700f, 0.361400f }	},
	{	{ -0.823111f, 0.491957f, 0.351610f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.901100f, 0.239700f, 0.361400f }	},
	{	{ 0.209959f, 0.438943f, -1.494926f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.911200f, 0.099300f, -0.399900f }	},
	{	{ 0.451408f, 1.383320f, -0.710237f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.911200f, 0.099300f, -0.399900f }	},
	{	{ 0.922970f, 0.580554f, 0.164801f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.911200f, 0.099300f, -0.399900f }	},
	{	{ 0.209959f, 0.438943f, -1.494926f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.900900f, -0.231300f, -0.367300f }	},
	{	{ 0.922970f, 0.580554f, 0.164801f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.900900f, -0.231300f, -0.367300f }	},
	{	{ 0.168062f, -0.194425f, -1.198741f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.900900f, -0.231300f, -0.367300f }	},
	{	{ 0.922970f, 0.580554f, 0.164801f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.898100f, 0.256800f, 0.357100f }	},
	{	{ 0.690754f, 1.554017f, 0.048798f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.898100f, 0.256800f, 0.357100f }	},
	{	{ 0.555411f, 0.750750f, 0.966913f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.898100f, 0.256800f, 0.357100f }	},
	{	{ 0.211487f, -0.198810f, 0.672988f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.582100f, -0.425300f, 0.693000f }	},
	{	{ 0.555411f, 0.750750f, 0.966913f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.582100f, -0.425300f, 0.693000f }	},
	{	{ 0.064105f, 0.397846f, 1.163016f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.582100f, -0.425300f, 0.693000f }	},
	{	{ 0.211487f, -0.198810f, 0.672988f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.011600f, -0.636300f, 0.771300f }	},
	{	{ 0.064105f, 0.397846f, 1.163016f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.011600f, -0.636300f, 0.771300f }	},
	{	{ -0.321231f, -0.052451f, 0.785704f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.011600f, -0.636300f, 0.771300f }	},
	{	{ -0.321231f, -0.052451f, 0.785704f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.434900f, -0.329900f, 0.837900f }	},
	{	{ 0.064105f, 0.397846f, 1.163016f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.434900f, -0.329900f, 0.837900f }	},
	{	{ -0.562602f, 0.611479f, 0.921830f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.434900f, -0.329900f, 0.837900f }	},
	{	{ -0.321231f, -0.052451f, 0.785704f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.806200f, -0.385200f, 0.449100f }	},
	{	{ -0.562602f, 0.611479f, 0.921830f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.806200f, -0.385200f, 0.449100f }	},
	{	{ -0.823111f, 0.491957f, 0.351610f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.806200f, -0.385200f, 0.449100f }	},
	{	{ -0.321231f, -0.052451f, 0.785704f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.719400f, -0.693600f, -0.038100f }	},
	{	{ -0.823111f, 0.491957f, 0.351610f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.719400f, -0.693600f, -0.038100f }	},
	{	{ -0.223367f, -0.030865f, -1.453793f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.719400f, -0.693600f, -0.038100f }	},
	{	{ -0.321231f, -0.052451f, 0.785704f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.269000f, -0.962900f, -0.021000f }	},
	{	{ -0.223367f, -0.030865f, -1.453793f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.269000f, -0.962900f, -0.021000f }	},
	{	{ 0.211487f, -0.198810f, 0.672988f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.269000f, -0.962900f, -0.021000f }	},
	{	{ 0.211487f, -0.198810f, 0.672988f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.389400f, -0.921100f, 0.006900f }	},
	{	{ -0.223367f, -0.030865f, -1.453793f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.389400f, -0.921100f, 0.006900f }	},
	{	{ 0.168062f, -0.194425f, -1.198741f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.389400f, -0.921100f, 0.006900f }	},
	{	{ 0.922970f, 0.580554f, 0.164801f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.785900f, -0.424000f, 0.450100f }	},
	{	{ 0.555411f, 0.750750f, 0.966913f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.785900f, -0.424000f, 0.450100f }	},
	{	{ 0.211487f, -0.198810f, 0.672988f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.785900f, -0.424000f, 0.450100f }	},
	{	{ 0.211487f, -0.198810f, 0.672988f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.732300f, -0.680700f, -0.018600f }	},
	{	{ 0.168062f, -0.194425f, -1.198741f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.732300f, -0.680700f, -0.018600f }	},
	{	{ 0.922970f, 0.580554f, 0.164801f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.732300f, -0.680700f, -0.018600f }	},
};
#define _Rock3_vertices_
#endif
#ifndef _Rock3_indices_
// Index Data follows: Sequential by mesh, Every Three Indices == One Triangle.
const unsigned int Rock3_indices[84] =
{
	 0, 1, 2,
	 3, 4, 5,
	 6, 7, 8,
	 9, 10, 11,
	 12, 13, 14,
	 15, 16, 17,
	 18, 19, 20,
	 21, 22, 23,
	 24, 25, 26,
	 27, 28, 29,
	 30, 31, 32,
	 33, 34, 35,
	 36, 37, 38,
	 39, 40, 41,
	 42, 43, 44,
	 45, 46, 47,
	 48, 49, 50,
	 51, 52, 53,
	 54, 55, 56,
	 57, 58, 59,
	 60, 61, 62,
	 63, 64, 65,
	 66, 67, 68,
	 69, 70, 71,
	 72, 73, 74,
	 75, 76, 77,
	 78, 79, 80,
	 81, 82, 83,
};
#define _Rock3_indices_
#endif
// Part of an OBJ_MATERIAL, the struct is 16 byte aligned so it is GPU register friendly.
#ifndef __OBJ_ATTRIBUTES__
typedef struct _OBJ_ATTRIBUTES_
{
	OBJ_VEC3    Kd; // diffuse reflectivity
	float	    d; // dissolve (transparency) 
	OBJ_VEC3    Ks; // specular reflectivity
	float       Ns; // specular exponent
	OBJ_VEC3    Ka; // ambient reflectivity
	float       sharpness; // local reflection map sharpness
	OBJ_VEC3    Tf; // transmission filter
	float       Ni; // optical density (index of refraction)
	OBJ_VEC3    Ke; // emissive reflectivity
	unsigned    illum; // illumination model
}OBJ_ATTRIBUTES;
#define __OBJ_ATTRIBUTES__
#endif
// This structure also has been made GPU register friendly so it can be transfered directly if desired.
// Note: Total struct size will vary depenedening on CPU processor architecture (string pointers).
#ifndef __OBJ_MATERIAL__
typedef struct _OBJ_MATERIAL_
{
	// The following items are typically used in a pixel/fragment shader, they are packed for GPU registers.
	OBJ_ATTRIBUTES attrib; // Surface shading characteristics & illumination model
	// All items below this line are not needed on the GPU and are generally only used during load time.
	const char* name; // the name of this material
	// If the model's materials contain any specific texture data it will be located below.
	const char* map_Kd; // diffuse texture
	const char* map_Ks; // specular texture
	const char* map_Ka; // ambient texture
	const char* map_Ke; // emissive texture
	const char* map_Ns; // specular exponent texture
	const char* map_d; // transparency texture
	const char* disp; // roughness map (displacement)
	const char* decal; // decal texture (lerps texture & material colors)
	const char* bump; // normal/bumpmap texture
	void* padding[2]; // 16 byte alignment on 32bit or 64bit
}OBJ_MATERIAL;
#define __OBJ_MATERIAL__
#endif
#ifndef _Rock3_materials_
// Material Data follows: pulled from a .mtl file of the same name if present.
const OBJ_MATERIAL Rock3_materials[1] =
{
	{
		{{ 0.122341f, 0.122341f, 0.122341f },
		1.000000f,
		{ 0.500000f, 0.500000f, 0.500000f },
		96.078430f,
		{ 1.000000f, 1.000000f, 1.000000f },
		60.000000f,
		{ 1.000000f, 1.000000f, 1.000000f },
		1.000000f,
		{ 0.000000f, 0.000000f, 0.000000f },
		2},
		"Rock",
		"",
		"",
		"",
		"",
		"",
		"",
		"",
		"",
		"",
	},
};
#define _Rock3_materials_
#endif
/************************************************/
/*  This section contains the model's structure */
/************************************************/
#ifndef _Rock3_batches_
// Use this conveinence array to batch render all geometry by like material.
// Each entry corresponds to the same entry in the materials array above.
// The two numbers provided are the IndexCount and the IndexOffset into the indices array.
// If you need more fine grained control(ex: for transformations) use the OBJ_MESH data below.
const unsigned int Rock3_batches[1][2] =
{
	{ 84, 0 },
};
#define _Rock3_batches_
#endif
#ifndef __OBJ_MESH__
typedef struct _OBJ_MESH_
{
	const char* name;
	unsigned    indexCount;
	unsigned    indexOffset;
	unsigned    materialIndex;
}OBJ_MESH;
#define __OBJ_MESH__
#endif
#ifndef _Rock3_meshes_
// Mesh Data follows: Meshes are .obj groups sorted & split by material.
// Meshes are provided in sequential order, sorted by material first and name second.
const OBJ_MESH Rock3_meshes[1] =
{
	{
		"default",
		84,
		0,
		0,
	},
};
#define _Rock3_meshes_
#endif
