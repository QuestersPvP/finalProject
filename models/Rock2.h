// "Rock2.h" generated by "Obj2Header.exe" [Version 1.9d] Author: L.Norri Fullsail University.
// Data is converted to left-handed coordinate system and UV data is V flipped for Direct3D/Vulkan.
// The companion file "Rock2.h2b" is a binary dump of this format(-padding) for more flexibility.
// Loading *.h2b: read version, sizes, handle strings(max len 260) by reading until null-terminated.
/***********************/
/*  Generator version  */
/***********************/
#ifndef _Rock2_version_
const char Rock2_version[4] = { '0','1','9','d' };
#define _Rock2_version_
#endif
/************************************************/
/*  This section contains the model's size data */
/************************************************/
#ifndef _Rock2_vertexcount_
const unsigned Rock2_vertexcount = 102;
#define _Rock2_vertexcount_
#endif
#ifndef _Rock2_indexcount_
const unsigned Rock2_indexcount = 102;
#define _Rock2_indexcount_
#endif
#ifndef _Rock2_materialcount_
const unsigned Rock2_materialcount = 1; // can be used for batched draws
#define _Rock2_materialcount_
#endif
#ifndef _Rock2_meshcount_
const unsigned Rock2_meshcount = 1;
#define _Rock2_meshcount_
#endif
/************************************************/
/*  This section contains the raw data to load  */
/************************************************/
#ifndef __OBJ_VEC3__
typedef struct _OBJ_VEC3_
{
	float x,y,z; // 3D Coordinate.
}OBJ_VEC3;
#define __OBJ_VEC3__
#endif
#ifndef __OBJ_VERT__
typedef struct _OBJ_VERT_
{
	OBJ_VEC3 pos; // Left-handed +Z forward coordinate w not provided, assumed to be 1.
	OBJ_VEC3 uvw; // D3D/Vulkan style top left 0,0 coordinate.
	OBJ_VEC3 nrm; // Provided direct from obj file, may or may not be normalized.
}OBJ_VERT;
#define __OBJ_VERT__
#endif
#ifndef _Rock2_vertices_
// Raw Vertex Data follows: Positions, Texture Coordinates and Normals.
const OBJ_VERT Rock2_vertices[102] =
{
	{	{ 0.652935f, 0.023679f, -0.154705f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.026800f, -0.998400f, -0.050300f }	},
	{	{ -0.161412f, -0.050489f, 0.883752f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.026800f, -0.998400f, -0.050300f }	},
	{	{ -0.366829f, 0.018948f, -0.604805f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.026800f, -0.998400f, -0.050300f }	},
	{	{ 0.361134f, 0.095778f, -0.782829f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.778300f, -0.470700f, -0.415600f }	},
	{	{ 0.794104f, 0.482335f, -0.409781f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.778300f, -0.470700f, -0.415600f }	},
	{	{ 0.652935f, 0.023679f, -0.154705f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.778300f, -0.470700f, -0.415600f }	},
	{	{ -0.366829f, 0.018948f, -0.604805f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.102000f, -0.691400f, -0.715300f }	},
	{	{ 0.117752f, 0.350955f, -0.994785f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.102000f, -0.691400f, -0.715300f }	},
	{	{ 0.361134f, 0.095778f, -0.782829f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.102000f, -0.691400f, -0.715300f }	},
	{	{ -0.519006f, 0.053294f, 0.400728f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.813500f, -0.572200f, -0.103600f }	},
	{	{ -0.617506f, 0.353783f, -0.485692f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.813500f, -0.572200f, -0.103600f }	},
	{	{ -0.366829f, 0.018948f, -0.604805f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.813500f, -0.572200f, -0.103600f }	},
	{	{ -0.161412f, -0.050489f, 0.883752f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.694300f, -0.609300f, 0.383100f }	},
	{	{ -0.516983f, 0.293751f, 0.786831f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.694300f, -0.609300f, 0.383100f }	},
	{	{ -0.519006f, 0.053294f, 0.400728f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.694300f, -0.609300f, 0.383100f }	},
	{	{ 0.361134f, 0.095778f, -0.782829f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.654600f, -0.003600f, -0.756000f }	},
	{	{ 0.117752f, 0.350955f, -0.994785f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.654600f, -0.003600f, -0.756000f }	},
	{	{ 0.794104f, 0.482335f, -0.409781f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.654600f, -0.003600f, -0.756000f }	},
	{	{ -0.366829f, 0.018948f, -0.604805f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.564600f, -0.132900f, -0.814600f }	},
	{	{ -0.617506f, 0.353783f, -0.485692f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.564600f, -0.132900f, -0.814600f }	},
	{	{ 0.117752f, 0.350955f, -0.994785f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.564600f, -0.132900f, -0.814600f }	},
	{	{ -0.519006f, 0.053294f, 0.400728f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.991300f, -0.109100f, 0.073200f }	},
	{	{ -0.516983f, 0.293751f, 0.786831f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.991300f, -0.109100f, 0.073200f }	},
	{	{ -0.617506f, 0.353783f, -0.485692f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.991300f, -0.109100f, 0.073200f }	},
	{	{ -0.161412f, -0.050489f, 0.883752f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.502700f, -0.290000f, 0.814400f }	},
	{	{ -0.098415f, 0.305561f, 1.049410f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.502700f, -0.290000f, 0.814400f }	},
	{	{ -0.516983f, 0.293751f, 0.786831f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.502700f, -0.290000f, 0.814400f }	},
	{	{ 0.446647f, 0.018474f, 0.664218f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.841800f, -0.187200f, 0.506300f }	},
	{	{ 0.801126f, 0.441825f, 0.231296f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.841800f, -0.187200f, 0.506300f }	},
	{	{ 0.446202f, 0.260076f, 0.754285f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.841800f, -0.187200f, 0.506300f }	},
	{	{ -0.117648f, 0.629859f, -0.855010f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.077200f, 0.845900f, -0.527800f }	},
	{	{ -0.187501f, 0.932766f, -0.379732f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.077200f, 0.845900f, -0.527800f }	},
	{	{ 0.452908f, 0.685794f, -0.681908f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.077200f, 0.845900f, -0.527800f }	},
	{	{ -0.617506f, 0.353783f, -0.485692f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.666400f, 0.580500f, -0.467900f }	},
	{	{ -0.187501f, 0.932766f, -0.379732f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.666400f, 0.580500f, -0.467900f }	},
	{	{ -0.117648f, 0.629859f, -0.855010f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.666400f, 0.580500f, -0.467900f }	},
	{	{ 0.794104f, 0.482335f, -0.409781f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.603100f, 0.796400f, 0.043700f }	},
	{	{ 0.108848f, 0.983702f, -0.089877f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.603100f, 0.796400f, 0.043700f }	},
	{	{ 0.801126f, 0.441825f, 0.231296f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.603100f, 0.796400f, 0.043700f }	},
	{	{ 0.108848f, 0.983702f, -0.089877f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.502600f, 0.814300f, 0.290500f }	},
	{	{ 0.148436f, 0.688483f, 0.669250f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.502600f, 0.814300f, 0.290500f }	},
	{	{ 0.801126f, 0.441825f, 0.231296f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.502600f, 0.814300f, 0.290500f }	},
	{	{ 0.148436f, 0.688483f, 0.669250f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.125900f, 0.922300f, 0.365300f }	},
	{	{ 0.108848f, 0.983702f, -0.089877f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.125900f, 0.922300f, 0.365300f }	},
	{	{ -0.503682f, 0.732355f, 0.333627f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.125900f, 0.922300f, 0.365300f }	},
	{	{ 0.148436f, 0.688483f, 0.669250f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.256700f, 0.759200f, 0.598100f }	},
	{	{ -0.503682f, 0.732355f, 0.333627f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.256700f, 0.759200f, 0.598100f }	},
	{	{ -0.098415f, 0.305561f, 1.049410f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.256700f, 0.759200f, 0.598100f }	},
	{	{ -0.098415f, 0.305561f, 1.049410f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.412200f, 0.660700f, 0.627300f }	},
	{	{ -0.503682f, 0.732355f, 0.333627f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.412200f, 0.660700f, 0.627300f }	},
	{	{ -0.516983f, 0.293751f, 0.786831f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.412200f, 0.660700f, 0.627300f }	},
	{	{ -0.503682f, 0.732355f, 0.333627f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.294800f, 0.946000f, 0.135100f }	},
	{	{ 0.108848f, 0.983702f, -0.089877f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.294800f, 0.946000f, 0.135100f }	},
	{	{ -0.187501f, 0.932766f, -0.379732f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.294800f, 0.946000f, 0.135100f }	},
	{	{ -0.503682f, 0.732355f, 0.333627f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.775300f, 0.607500f, -0.173000f }	},
	{	{ -0.187501f, 0.932766f, -0.379732f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.775300f, 0.607500f, -0.173000f }	},
	{	{ -0.617506f, 0.353783f, -0.485692f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.775300f, 0.607500f, -0.173000f }	},
	{	{ -0.187501f, 0.932766f, -0.379732f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.187200f, 0.916900f, -0.352600f }	},
	{	{ 0.108848f, 0.983702f, -0.089877f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.187200f, 0.916900f, -0.352600f }	},
	{	{ 0.452908f, 0.685794f, -0.681908f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.187200f, 0.916900f, -0.352600f }	},
	{	{ 0.452908f, 0.685794f, -0.681908f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.561100f, 0.823100f, -0.088100f }	},
	{	{ 0.108848f, 0.983702f, -0.089877f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.561100f, 0.823100f, -0.088100f }	},
	{	{ 0.794104f, 0.482335f, -0.409781f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.561100f, 0.823100f, -0.088100f }	},
	{	{ 0.446202f, 0.260076f, 0.754285f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.600700f, 0.535400f, 0.593700f }	},
	{	{ 0.801126f, 0.441825f, 0.231296f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.600700f, 0.535400f, 0.593700f }	},
	{	{ 0.148436f, 0.688483f, 0.669250f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.600700f, 0.535400f, 0.593700f }	},
	{	{ -0.516983f, 0.293751f, 0.786831f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.989700f, 0.116500f, 0.083700f }	},
	{	{ -0.503682f, 0.732355f, 0.333627f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.989700f, 0.116500f, 0.083700f }	},
	{	{ -0.617506f, 0.353783f, -0.485692f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.989700f, 0.116500f, 0.083700f }	},
	{	{ -0.617506f, 0.353783f, -0.485692f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.568100f, -0.068500f, -0.820100f }	},
	{	{ -0.117648f, 0.629859f, -0.855010f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.568100f, -0.068500f, -0.820100f }	},
	{	{ 0.117752f, 0.350955f, -0.994785f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.568100f, -0.068500f, -0.820100f }	},
	{	{ 0.117752f, 0.350955f, -0.994785f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.189000f, 0.562800f, -0.804700f }	},
	{	{ -0.117648f, 0.629859f, -0.855010f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.189000f, 0.562800f, -0.804700f }	},
	{	{ 0.452908f, 0.685794f, -0.681908f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.189000f, 0.562800f, -0.804700f }	},
	{	{ 0.117752f, 0.350955f, -0.994785f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.645600f, 0.064900f, -0.760900f }	},
	{	{ 0.452908f, 0.685794f, -0.681908f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.645600f, 0.064900f, -0.760900f }	},
	{	{ 0.794104f, 0.482335f, -0.409781f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.645600f, 0.064900f, -0.760900f }	},
	{	{ 0.446202f, 0.260076f, 0.754285f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.451500f, 0.465000f, 0.761500f }	},
	{	{ 0.148436f, 0.688483f, 0.669250f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.451500f, 0.465000f, 0.761500f }	},
	{	{ -0.098415f, 0.305561f, 1.049410f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.451500f, 0.465000f, 0.761500f }	},
	{	{ 0.446202f, 0.260076f, 0.754285f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.431900f, -0.314400f, 0.845400f }	},
	{	{ -0.098415f, 0.305561f, 1.049410f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.431900f, -0.314400f, 0.845400f }	},
	{	{ 0.446647f, 0.018474f, 0.664218f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.431900f, -0.314400f, 0.845400f }	},
	{	{ 0.446647f, 0.018474f, 0.664218f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.348300f, -0.445400f, 0.824800f }	},
	{	{ -0.098415f, 0.305561f, 1.049410f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.348300f, -0.445400f, 0.824800f }	},
	{	{ -0.161412f, -0.050489f, 0.883752f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.348300f, -0.445400f, 0.824800f }	},
	{	{ 0.794104f, 0.482335f, -0.409781f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.950500f, -0.309200f, -0.030000f }	},
	{	{ 0.801126f, 0.441825f, 0.231296f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.950500f, -0.309200f, -0.030000f }	},
	{	{ 0.652935f, 0.023679f, -0.154705f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.950500f, -0.309200f, -0.030000f }	},
	{	{ 0.652935f, 0.023679f, -0.154705f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.844500f, -0.492800f, 0.209600f }	},
	{	{ 0.801126f, 0.441825f, 0.231296f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.844500f, -0.492800f, 0.209600f }	},
	{	{ 0.446647f, 0.018474f, 0.664218f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.844500f, -0.492800f, 0.209600f }	},
	{	{ 0.652935f, 0.023679f, -0.154705f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.121300f, -0.992300f, 0.024200f }	},
	{	{ 0.446647f, 0.018474f, 0.664218f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.121300f, -0.992300f, 0.024200f }	},
	{	{ -0.161412f, -0.050489f, 0.883752f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.121300f, -0.992300f, 0.024200f }	},
	{	{ -0.161412f, -0.050489f, 0.883752f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.269000f, -0.963100f, -0.007800f }	},
	{	{ -0.519006f, 0.053294f, 0.400728f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.269000f, -0.963100f, -0.007800f }	},
	{	{ -0.366829f, 0.018948f, -0.604805f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.269000f, -0.963100f, -0.007800f }	},
	{	{ -0.366829f, 0.018948f, -0.604805f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.068700f, -0.987000f, -0.145200f }	},
	{	{ 0.361134f, 0.095778f, -0.782829f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.068700f, -0.987000f, -0.145200f }	},
	{	{ 0.652935f, 0.023679f, -0.154705f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.068700f, -0.987000f, -0.145200f }	},
};
#define _Rock2_vertices_
#endif
#ifndef _Rock2_indices_
// Index Data follows: Sequential by mesh, Every Three Indices == One Triangle.
const unsigned int Rock2_indices[102] =
{
	 0, 1, 2,
	 3, 4, 5,
	 6, 7, 8,
	 9, 10, 11,
	 12, 13, 14,
	 15, 16, 17,
	 18, 19, 20,
	 21, 22, 23,
	 24, 25, 26,
	 27, 28, 29,
	 30, 31, 32,
	 33, 34, 35,
	 36, 37, 38,
	 39, 40, 41,
	 42, 43, 44,
	 45, 46, 47,
	 48, 49, 50,
	 51, 52, 53,
	 54, 55, 56,
	 57, 58, 59,
	 60, 61, 62,
	 63, 64, 65,
	 66, 67, 68,
	 69, 70, 71,
	 72, 73, 74,
	 75, 76, 77,
	 78, 79, 80,
	 81, 82, 83,
	 84, 85, 86,
	 87, 88, 89,
	 90, 91, 92,
	 93, 94, 95,
	 96, 97, 98,
	 99, 100, 101,
};
#define _Rock2_indices_
#endif
// Part of an OBJ_MATERIAL, the struct is 16 byte aligned so it is GPU register friendly.
#ifndef __OBJ_ATTRIBUTES__
typedef struct _OBJ_ATTRIBUTES_
{
	OBJ_VEC3    Kd; // diffuse reflectivity
	float	    d; // dissolve (transparency) 
	OBJ_VEC3    Ks; // specular reflectivity
	float       Ns; // specular exponent
	OBJ_VEC3    Ka; // ambient reflectivity
	float       sharpness; // local reflection map sharpness
	OBJ_VEC3    Tf; // transmission filter
	float       Ni; // optical density (index of refraction)
	OBJ_VEC3    Ke; // emissive reflectivity
	unsigned    illum; // illumination model
}OBJ_ATTRIBUTES;
#define __OBJ_ATTRIBUTES__
#endif
// This structure also has been made GPU register friendly so it can be transfered directly if desired.
// Note: Total struct size will vary depenedening on CPU processor architecture (string pointers).
#ifndef __OBJ_MATERIAL__
typedef struct _OBJ_MATERIAL_
{
	// The following items are typically used in a pixel/fragment shader, they are packed for GPU registers.
	OBJ_ATTRIBUTES attrib; // Surface shading characteristics & illumination model
	// All items below this line are not needed on the GPU and are generally only used during load time.
	const char* name; // the name of this material
	// If the model's materials contain any specific texture data it will be located below.
	const char* map_Kd; // diffuse texture
	const char* map_Ks; // specular texture
	const char* map_Ka; // ambient texture
	const char* map_Ke; // emissive texture
	const char* map_Ns; // specular exponent texture
	const char* map_d; // transparency texture
	const char* disp; // roughness map (displacement)
	const char* decal; // decal texture (lerps texture & material colors)
	const char* bump; // normal/bumpmap texture
	void* padding[2]; // 16 byte alignment on 32bit or 64bit
}OBJ_MATERIAL;
#define __OBJ_MATERIAL__
#endif
#ifndef _Rock2_materials_
// Material Data follows: pulled from a .mtl file of the same name if present.
const OBJ_MATERIAL Rock2_materials[1] =
{
	{
		{{ 0.640000f, 0.640000f, 0.640000f },
		1.000000f,
		{ 0.500000f, 0.500000f, 0.500000f },
		96.078430f,
		{ 0.000000f, 0.000000f, 0.000000f },
		60.000000f,
		{ 1.000000f, 1.000000f, 1.000000f },
		1.000000f,
		{ 0.000000f, 0.000000f, 0.000000f },
		2},
		"Material.003",
		"",
		"",
		"",
		"",
		"",
		"",
		"",
		"",
		"",
	},
};
#define _Rock2_materials_
#endif
/************************************************/
/*  This section contains the model's structure */
/************************************************/
#ifndef _Rock2_batches_
// Use this conveinence array to batch render all geometry by like material.
// Each entry corresponds to the same entry in the materials array above.
// The two numbers provided are the IndexCount and the IndexOffset into the indices array.
// If you need more fine grained control(ex: for transformations) use the OBJ_MESH data below.
const unsigned int Rock2_batches[1][2] =
{
	{ 102, 0 },
};
#define _Rock2_batches_
#endif
#ifndef __OBJ_MESH__
typedef struct _OBJ_MESH_
{
	const char* name;
	unsigned    indexCount;
	unsigned    indexOffset;
	unsigned    materialIndex;
}OBJ_MESH;
#define __OBJ_MESH__
#endif
#ifndef _Rock2_meshes_
// Mesh Data follows: Meshes are .obj groups sorted & split by material.
// Meshes are provided in sequential order, sorted by material first and name second.
const OBJ_MESH Rock2_meshes[1] =
{
	{
		"default",
		102,
		0,
		0,
	},
};
#define _Rock2_meshes_
#endif
